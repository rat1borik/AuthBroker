@page "/auth"

@using System.Web
@using Models
@inject NavigationManager navManager
@inject SessionStore ss
@inject AppClientStore acs
@inject GrantStore scs
@inject AuthenticationStateProvider asp

<h3>@Loc["Authorize"]</h3>
@if (AuthApp != null)
{
	<p>@Loc["App"]: @AuthApp.Name</p>
	@if (CurrentSession != null)
	{
		<h4>@Loc["Current session:"]</h4>
		<p>@Loc["Scopes:"]</p>
		@if (CurrentSession.Grants != null)
		{
			@foreach (var scope in CurrentSession.Grants)
			{
				<p>@string.Format("{0} ({1})", scope.Name , scope.Action)</p>
			}
		}
	}
	else
	{
		@if (AuthScopes != null) {
			<p>@Loc["Requested grants:"]</p>
			@foreach (var scope in AuthScopes) {
				<p>@string.Format("{0} ({1})", scope.Name , scope.Action)</p>
			}
		}
		<Button Color="ButtonColor.Primary" @onclick="@Auth">Accept</Button>
	}
} else {
	<p>@Loc["This App does not exists"]</p>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name ="app_id")]
	public string AppId { get;set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "response_type")]
	public string ResponseType { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "scopes")]
	public string[] RequestedScopes { get; set; }


	[Inject] protected ToastService ToastService { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "redirect_uri")]
	public string? RedirectURI { get; set; }

	[CascadingParameter]
	private Session? CurrentSession { get; set; }
	private AppClient? AuthApp { get; set; }
	private Grant[]? AuthScopes { get; set; }

	private async Task Auth() {
		var state = await asp.GetAuthenticationStateAsync();
		var sess = await ss.CreateSession(state.User.Identity.Name, AppId, AuthScopes);
		if (sess != null) {
			Redirect(sess.Code);
		}
	}

	private void Redirect(string authCode) {
		Uri redir;
		if (Uri.TryCreate(RedirectURI, UriKind.Absolute, out redir) && ResponseType == "code") {
			if (AuthApp.AllowedRedirectUris.Where(uri=>uri.IsBaseOf(redir)).FirstOrDefault() == null) {
				ToastService.Notify(new ToastMessage(ToastType.Danger, @Loc["Something went wrong (Invalid request data)"]));
				return;
			}
			UriBuilder ub = new UriBuilder(redir);
			var query = HttpUtility.ParseQueryString(ub.Query);
			query["auth_code"] = authCode.Base64UrlEncode();
			ub.Query = query.ToString();
			navManager.NavigateTo(ub.ToString(), true);

		}
	}

	protected override async Task OnInitializedAsync() {
		try {
			var state = await asp.GetAuthenticationStateAsync();
			CurrentSession = await ss.GetSessionAsync(AppId, state.User.Identity.Name);
			AuthApp = await acs.GetAppClientAsync(AppId);
			AuthScopes = RequestedScopes.ToList().ConvertAll<Grant?>(el => scs.GetGrant(el)).Where(el => el != null).ToArray();
			if (CurrentSession != null)
				Redirect(CurrentSession.Code);

		} catch(Exception ex) {
			
		}
	}
}
