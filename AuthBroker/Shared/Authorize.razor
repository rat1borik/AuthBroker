@page "/auth"

@using System.Web
@using Models
@inject NavigationManager navManager
@inject SessionStore ss
@inject AppClientStore acs
@inject ScopeStore scs
@inject AuthenticationStateProvider asp

<h3>@Loc["Authorize"]</h3>
@if (AuthApp != null)
{
	<p>@Loc["App"]: @AuthApp.Name</p>
	@if (CurrentSession != null)
	{
		<h4>@Loc["Current session:"]</h4>
		<p>@Loc["Scopes:"]</p>
		@if (CurrentSession.Scopes != null)
		{
			@foreach (var scope in CurrentSession.Scopes)
			{
				<p>@scope.Name</p>
			}
		}
	}
	else
	{
		@if (AuthScopes != null) {
			<p>@Loc["Requested scopes"]</p>
			@foreach (var scope in AuthScopes) {
				<p>@scope.Name</p>
			}
		}
		<Button Color="ButtonColor.Primary" @onclick="@Auth">Accept</Button>
	}
} else {
	<p>@Loc["This App does not exists"]</p>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery(Name ="app_id")]
	public string AppId { get;set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "response_type")]
	public string ResponseType { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "scopes")]
	public string[] RequestedScopes { get; set; }

	Guid[] _requestedScopes;

	[Inject] protected ToastService ToastService { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "redirect_uri")]
	public string? RedirectURI { get; set; }

	[CascadingParameter]
	private Session? CurrentSession { get; set; }
	private AppClient? AuthApp { get; set; }
	private Scope?[]? AuthScopes { get; set; }

	private async Task Auth() {
		var state = await asp.GetAuthenticationStateAsync();
		var sess = await ss.CreateSession(state.User.Identity.Name, AppId, _requestedScopes);
		if (sess != null) {
			Redirect(sess.Id.ToString());
		}
	}

	private void Redirect(string authCode) {
		Uri redir;
		if (Uri.TryCreate(RedirectURI, UriKind.Absolute, out redir) && ResponseType == "code") {
			if (AuthApp.AllowedRedirectUris.Where(uri=>uri.IsBaseOf(redir)).FirstOrDefault() == null) {
				ToastService.Notify(new ToastMessage(ToastType.Danger, @Loc["Something went wrong (Invalid request data)"]));
				return;
			}
			UriBuilder ub = new UriBuilder(redir);
			var query = HttpUtility.ParseQueryString(ub.Query);
			query["auth_code"] = authCode;
			ub.Query = query.ToString();
			navManager.NavigateTo(ub.ToString(), true);

		}
	}

	protected override async Task OnInitializedAsync() {
		_requestedScopes = RequestedScopes.ToList().ConvertAll<Guid?>(el =>
		{
			Guid code;
			if (Guid.TryParse(el, out code)) return code;
			return null;
		}).Where(el => el != null).ToList().ConvertAll<Guid>(el => (Guid)el).ToArray();

		var state = await asp.GetAuthenticationStateAsync();
		CurrentSession = await ss.GetSessionAsync(AppId, state.User.Identity.Name);
		AuthApp = await acs.GetAppClientAsync(AppId);
		AuthScopes = _requestedScopes.ToList().ConvertAll<Scope?>(el => scs.GetScopeAsync(el).Result).ToArray();
		if (CurrentSession != null)
			Redirect(CurrentSession.Id.ToString());

		
	}
}
