@using AuthBroker.Authentication
@using AuthBroker.Models;
@using System.Security.Cryptography;
@using System.Text;
@using System.Text.Json;
@using System.ComponentModel.DataAnnotations;
@inject UserAccStore us;
@inject IJSRuntime js;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;

<section class="vh-100 gradient-custom">
		<div class="row g-0 d-flex justify-content-center align-items-center h-100">
	  <div class="col-12 col-md-8 col-lg-6 col-xl-5"style=" max-width: 450px">
		<div class="card bg-dark text-white login-box " style="border-radius: 1rem;">
				<Tabs EnableFadeEffect="true" NavStyle="NavStyle.Pills" Class="nav-justified my-2 mx-2">
					<Tab Title="@Loc["Signing in"]" IsActive="true">
					<Content>
						<EditForm Model="@model" OnValidSubmit="@Authenticate">
								
						  <div class="card-body p-5 text-center">

							<div class="mb-md-3 mt-md-4 pb-5">

							  <span class="oi oi-key mb-5 fs-1 text-white-50"></span>

							  <div class="form-outline form-white mb-3">
								<InputText @bind-Value="model.UserName" type="text" id="loginUserName" placeholder="@Loc["Login"]" class="form-control" />
							  </div>

							  <div class="form-outline form-white mb-3">
								<InputText @bind-Value="model.Password" type="password" id="loginPassword" placeholder="@Loc["Password"]" class="form-control" />
							  </div>

								@*<p class="small mb-5 pb-lg-2"><a class="text-white-50" href="#!">Forgot password?</a></p>*@
								<div class="px-5">
										<DataAnnotationsValidator/>
										<ValidationSummary />
								</div>
							  <Button Class="btn btn-outline-primary btn-lg px-5 mt-5"  Type="ButtonType.Submit">@Loc["Sign in"]</Button>

							</div>

						  </div>
					  </EditForm>
					</Content>
			</Tab>
					<Tab Title="@Loc["Signing up"]">
				<Content>
					<EditForm EditContext="@editContextReg" OnValidSubmit="@SignUp">
					<DataAnnotationsValidator />
					<div class="card-body p-5 text-center">

					<div class="mb-md-3 mt-md-4 pb-5">

					  <span class="oi oi-account-login mb-5 fs-1 text-white-50"></span>

					  <div class="form-outline form-white mb-3">
											<InputText @bind-Value="modelR.UserName" type="text" id="regUserName" placeholder="@Loc["Login"]" class="form-control" />
											<ValidationMessage For="@(() => modelR.UserName)" />

					  </div>

					  <div class="form-outline form-white mb-3">
											<InputText @bind-Value="modelR.Email" type="email" id="regEmail" placeholder="@Loc["E-mail"]" class="form-control" />
											<ValidationMessage For="@(() => modelR.Email)" />
					  </div>

					  <div class="form-outline form-white mb-3">
											<InputText @bind-Value="modelR.Password" type="password" id="regPassword" @onpaste:preventDefault="true" placeholder="@Loc["Create password"]" class="form-control" />
											<ValidationMessage For="@(() => modelR.Password)" />
					  </div>

					  <div class="form-outline form-white mb-3">
											<InputText @bind-Value="modelR.ValidationPassword" type="password" id="regValidPassword" @onpaste:preventDefault="true" placeholder="@Loc["Repeat password"]" class="form-control" />
											<ValidationMessage For="@(() => modelR.ValidationPassword)" />
					  </div>

											@*<p class="small mb-5 pb-lg-2"><a class="text-white-50" href="#!">Forgot password?</a></p>*@


								<Button Class="btn btn-outline-primary btn-lg px-5 mt-5" Type="ButtonType.Submit">@Loc["Sign up"]</Button>

							</div>

						</div>
					</EditForm>
				</Content>
			</Tab>
		</Tabs>
		 </div>
	  </div>
	</div>

</section>

@code {
	[Inject] protected ToastService ToastService { get; set; }

	private EditContext? editContextReg;
	private ValidationMessageStore? messageStoreReg;


	private class SigninModel {
		[Required(ErrorMessage="No Username")]
		public string UserName { get; set; }
		[Required(ErrorMessage = "No Password")]
		public string Password { get; set; }
	}
	private class SignupModel {
		[MinLength(10, ErrorMessage = "UserName is too short.")]
		[Required(ErrorMessage = "No Username")]
		public string UserName { get; set; }
		[Required(ErrorMessage = "No Email")]
		[EmailAddress(ErrorMessage = "It's not email address")]
		public string Email { get; set; }
		[MinLength(8, ErrorMessage = "Password is too short.")]
		[Required(ErrorMessage = "No Password")]
		public string Password { get; set; }
		[Required(ErrorMessage = "No Validation password")]
		public string ValidationPassword { get; set; }
	}

	private SigninModel model = new SigninModel();
	private SignupModel modelR = new SignupModel();

	protected override void OnInitialized() {
		editContextReg = new(modelR);
		editContextReg.OnValidationRequested += (s, e) => HandleValidation();
		editContextReg.OnFieldChanged += (s, e) => HandleValidation();
		messageStoreReg = new(editContextReg);
	}

	private void HandleValidation() {
		messageStoreReg?.Clear();
		// Custom validation logic
		if (modelR.Password != modelR.ValidationPassword) {
			messageStoreReg?.Add(()=>modelR.ValidationPassword,Loc["Passwords doesn't match"]);
		}
	}

	private async Task Authenticate() {
		SHA256 sha = SHA256.Create();
		var userAccount = await us.GetByLogin(model.UserName);
		if (userAccount == null || !userAccount.VerifyPassword(Encoding.UTF8.GetBytes(model.Password))) {
			ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Incorrect login or password!"]));
			return;
		}

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSession {
				UserName = model.UserName,
				Password = model.Password
				});
	}

	private async Task SignUp() {
		var userAccount = await us.GetByLogin(modelR.UserName);
		if (userAccount != null) {
			messageStoreReg?.Add(() => modelR.UserName, Loc["This username is taken"]);
			modelR.UserName = "";
			return;
		}
		User user = new User {
				Login = modelR.UserName,
				Password = Encoding.UTF8.GetBytes(modelR.Password),
				Credentials = new Dictionary<string, string>()
		};
		user.Credentials.Add("e-mail", modelR.Email);

		await us.AddAsync(user);

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSession {
				UserName = modelR.UserName,
				Password = modelR.Password
			});
		navManager.NavigateTo("/", true);
	}
}
