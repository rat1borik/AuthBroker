@page "/appClients"
@attribute [Authorize(Roles = "Admin")]

<PageTitle>@Loc["Admin panel: AppClients"]</PageTitle>

@using AuthBroker.Models
@inject AppClientStore acs
@inject IJSRuntime jsr

<!-- Modal -->
<div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addModalLabel">@Loc["Add new app"]</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <form>
          <div class="modal-body mb-3">
                <label for="recipient-name" class="col-form-label" >@Loc["Name"]</label>
                <input  type="text" class="form-control" id="recipient-name" @bind="@formName" required>
                <label for="recipient-uris" class="col-form-label">@Loc["Allowed Redirect Uris"]</label>
                <textarea class="form-control" id="recipient-uris" @bind="@formUris" required></textarea>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Loc["Close"]</button>
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@Add">@Loc["Save"]</button>
          </div>
        </form>
    </div>
  </div>
</div>

    <h1>@Loc["App Clients"]</h1>

@if (appClients == null) {
    <p><em>@Loc["Loading..."]</em></p>
} else {
        

            <table class="table table-hover">
        <thead>
            <tr>
                    <th>@Loc["App name"]</th>
                    <th>@Loc["App Id"]</th>
                <th>@Loc["Allowed Redirect Uris"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var _app in appClients) {
                <tr class="col">
                        <td class="align-middle">@_app.Name</td>
                        <td class="align-middle">@_app.Id <button class="btn btn-sm btn-dark " @onclick="()=>CopyToClipboard(_app.Id)"><span class="oi oi-clipboard"></span></button></td>
                        <td class="align-middle">
                            @foreach(var aru in _app.AllowedRedirectUris) {
                                @aru.ToString()<br />
                            }
                        </td>
                        <td class="d-flex justify-content-end"><button class="btn btn-dark" @onclick="() => Remove(_app)"><span class="oi oi-trash"></span></button></td>
                </tr>
            }
        </tbody>
    </table>

    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addModal">
        @Loc["Add"]
    </button>              
}

<Modal @ref="secretKeyModal" Title="@Loc["Your App`s secret key"]">
    <BodyTemplate>
        @secretKey
        <button class="btn btn-dark" @onclick="()=>CopyToClipboard(secretKey)"><span class="oi oi-clipboard"></span></button>
    </BodyTemplate>
</Modal>

@code {
    [Inject] protected ToastService ToastService { get; set; }

    private string formName = "";
    private string formUris = "";
    private string secretKey = "";
    private Modal? secretKeyModal;

    [CascadingParameter]
    private List<AppClient>? appClients { get; set; }

    protected async Task Refresh() {
        appClients = await acs.GetListAsync();
    }

    protected override async Task OnInitializedAsync() {
        await Refresh();
    }

    private async Task Add() {
        var appClient = new AppClient() { Name = formName, AllowedRedirectUris = formUris.Split("\n").ToList().ConvertAll<Uri?>(el=> {
            Uri uri;
            if (Uri.TryCreate(el, UriKind.Absolute, out uri))
                return uri;
            return null;
        }).Where(el=>el!=null).ToArray() };
        await acs.AddAsync(appClient);
        secretKey = appClient.GetSecretKey();
        await secretKeyModal.ShowAsync();
        await Refresh();
    }

    private void OnHideSecretModalClick() {
        secretKey = "";
        secretKeyModal.ShowAsync();
    }

    private async Task Remove(AppClient gr) {
        await acs.RemoveAsync(gr);
        await Refresh();
    }

    private async Task CopyToClipboard(string text) {
        await jsr.InvokeVoidAsync("navigator.clipboard.writeText", text);
        ToastService.Notify(new(ToastType.Success, Loc["Copied"]));
    }
}
