
@using AuthBroker.Models
@inject AccessTokenStore ats

@if (AccTokens == null) {
    <p>@Loc["Loading"]...</p>
} else {
    <div class="row">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>@Loc["Ip"]</th>
                    <th>@Loc["ExpiredAt"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (AccTokens != null)
                    @foreach (var at in AccTokens) {
                        <tr>
                            <td class="align-middle">@at.Ip.ToString()</td>
                            <td class="align-middle">@at.Token.ExpiredAt.ToString()</td>
                            <td class="d-flex justify-content-end"><Button Color="ButtonColor.Dark" @onclick="()=>Logout(at)"><span class="oi oi-account-logout"></span></Button></td>
                        </tr>
                    }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public List<AccessToken>? AccTokens { get; set; }

    [Parameter]
    public Session Session { get; set; }

    protected override async Task OnInitializedAsync() {
        await Refresh();
    }

    private async Task Refresh() {
        AccTokens = await ats.GetBySession(Session);
    }

    protected async Task Logout(AccessToken at) {
        await ats.RemoveAsync(at);
        await Refresh();
    }
}