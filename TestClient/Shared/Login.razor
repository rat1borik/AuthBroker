@page "/auth"

@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.IdentityModel.Tokens;
@using Microsoft.IdentityModel;
@using System.Security.Cryptography;
@using TestClient.Authentication;
@using TestClient.Data;
@using AuthBrokerClient;

@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js;
@inject NavigationManager navManager;
@inject StateProvider sp;
@inject IConfiguration cfg;
@inject AuthTokenProvider atp;

<section class="vh-100 gradient-custom">
	@if (AuthCode != null) {
		<p>Logging in</p>
	} else {
		<div class="row g-0 d-flex justify-content-center align-items-center h-100">
			<div class="col-12 col-md-8 col-lg-6 col-xl-5"style=" max-width: 450px">
		<div class="card">
					<div class="card-body p-3 text-center">
					<div class="mb-md-3 mt-md-4 pb-5">
				
						<span class="mb-5 fs-1 text-black fw-bold">Test Client</span>
							<Button @onclick="SignIn" Class="btn-outline-primary btn-lg px-5 mt-5">@Loc["Login via AuthBroker"]</Button>
		</div>
		</div>
		</div>
		</div>
		</div>
}
</section>

@code {
	[CascadingParameter]
	private ConnectionInfo connectionInfo { get; set; }

	[Inject] protected ToastService ToastService { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "auth_code")]
	public string? AuthCode { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "state")]
	public string? State { get; set; }

	private void SignIn() {
		navManager.NavigateTo(atp.GetAuthenticationURL(navManager.BaseUri + "auth", sp.GetState(connectionInfo.RemoteIpAddress).Base64UrlEncode()), true);
	}

	protected override async Task OnInitializedAsync() {
		if ((await asp.GetAuthenticationStateAsync()).IsAnonymous()) {
			if (AuthCode != null) {
				if (State == null || !sp.ValidateState(State.Base64UrlDecode(), connectionInfo.RemoteIpAddress)) {
					ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Something went wrong"] + ": " + Loc["session time has expired"]));
					return;
				}

				var (err, token) = await atp.Authenticate(AuthCode, connectionInfo.RemoteIpAddress, connectionInfo.UserAgent);
				if (err != null) {
					ToastService.Notify(new ToastMessage(ToastType.Danger, Loc[err]));
					return;
				}

				await ((CustomAuthenticationStateProvider)asp).UpdateAuthenticationState(token);
				navManager.NavigateTo("/");
			}
		} else {
			navManager.NavigateTo("/");
		}
	}
}