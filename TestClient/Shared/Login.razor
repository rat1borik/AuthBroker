@page "/auth"

@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.IdentityModel.Tokens;
@using Microsoft.IdentityModel;
@using System.Security.Cryptography;
@using TestClient.Authentication;
@using TestClient.Data;

@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js;
@inject NavigationManager navManager;
@inject StateProvider sp;
@inject IConfiguration cfg;
@inject TokenValidator tokenValidator;

<section class="vh-100 gradient-custom">
	@if (AuthCode != null) {
		<p>Logging in</p>
	} else {
		<div class="row g-0 d-flex justify-content-center align-items-center h-100">
			<div class="col-12 col-md-8 col-lg-6 col-xl-5"style=" max-width: 450px">
		<div class="card">
					<div class="card-body p-3 text-center">
					<div class="mb-md-3 mt-md-4 pb-5">
				
						<span class="mb-5 fs-1 text-black fw-bold">Test Client</span>
							<Button @onclick="async() => await SignIn()" Class="btn-outline-primary btn-lg px-5 mt-5">@Loc["Login via AuthBroker"]</Button>
		</div>
		</div>
		</div>
		</div>
		</div>
}
</section>

@code {
	[CascadingParameter]
	private ConnectionInfo? connectionInfo { get; set; }

	[Inject] protected ToastService ToastService { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "auth_code")]
	public string? AuthCode { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "state")]
	public string? State { get; set; }

	private async Task SignIn() {
		navManager.NavigateTo(string.Format("https://localhost:7276/auth?app_id={0}&response_type=code&scopes=e-mail&redirect_uri={1}auth?state={2}", cfg.GetSection("SSO")["ClientId"], navManager.BaseUri, sp.GetState().Base64UrlEncode()), true);
	}

	protected override async Task OnInitializedAsync() {
		if ((await asp.GetAuthenticationStateAsync()).IsAnonymous()) {
			if (AuthCode != null) {
				if (State == null || !sp.ValidateState(State.Base64UrlDecode())) {
					ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Something went wrong"] + ": " + Loc["session time has expired"]));
					return;
				}
				var request = new HttpRequestMessage(HttpMethod.Post,
						"https://localhost:7276/api/v1/token");
				request.Headers.Add("Accept", "application/json");
				request.Headers.Add("User-Agent", "TestApp");
				request.Content = JsonContent.Create(new AuthTokenRequest { GrantType = "authorization_code", Code = AuthCode, Secret = cfg.GetSection("SSO")["ClientSecret"], RemoteIp = connectionInfo.RemoteIpAddress, UserAgent = connectionInfo.UserAgent });

				var client = ClientFactory.CreateClient();

				var response = await client.SendAsync(request);

				if (response.IsSuccessStatusCode && response.Content != null) {
					var result = await response.Content.ReadFromJsonAsync<AuthTokenResponse>();
					var jwtHandler = new JwtSecurityTokenHandler();
					SecurityToken securityToken;
					try {
						var claims = jwtHandler.ValidateToken(result.AccessToken, await tokenValidator.GetValidationParameters(), out securityToken);
						if (securityToken != null&& claims != null) {
							ToastService.Notify(new ToastMessage(ToastType.Success, "Success"));
							await ((CustomAuthenticationStateProvider)asp).UpdateAuthenticationState(result.AccessToken);
							navManager.NavigateTo("/");
						}
					} catch (SecurityTokenException) {
						ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Incorrect authentification data"]));
					} catch (ArgumentNullException) {
						ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Incorrect authentification data"]));
					}
				} else {
					ToastService.Notify(new ToastMessage(ToastType.Danger, response.ReasonPhrase));
				}
			}
		} else {
			navManager.NavigateTo("/");
		}
	}
}