@page "/auth"

@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js;
@inject NavigationManager navManager;

<section class="vh-100 gradient-custom">
	@if (AuthCode != null) {
		<p>Logging in</p>
	} else {
		<div class="row g-0 d-flex justify-content-center align-items-center h-100">
			<div class="col-12 col-md-8 col-lg-6 col-xl-5"style=" max-width: 450px">
		<div class="card">
					<div class="card-body p-3 text-center">
					<div class="mb-md-3 mt-md-4 pb-5">
				
						<span class="mb-5 fs-1 text-black fw-bold">Test Client</span>
							<Button @onclick="async() => await SignIn()" Class="btn-outline-primary btn-lg px-5 mt-5">@Loc["Login via AuthBroker"]</Button>
		</div>
		</div>
		</div>
		</div>
		</div>
}
</section>

@code {
	public class AuthTokenRequest {
		public string GrantType { get; set; }

		public Guid Code { get; set; }

		public string Secret { get; set; }
	}

	[Inject] protected ToastService ToastService { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "auth_code")]
	public string? AuthCode { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "state")]
	public string? State { get; set; }

	private async Task SignIn() {
		navManager.NavigateTo(string.Format("https://localhost:7276/auth?app_id={0}&response_type=code&redirect_uri={1}auth?state={2}", "5244512827464867791", navManager.BaseUri, 1), true);
	}

	protected override async Task OnInitializedAsync() {
		Guid code;

		if (AuthCode != null && Guid.TryParse(AuthCode, out code)) {
			var request = new HttpRequestMessage(HttpMethod.Post,
					"https://localhost:7276/api/v1/token");
			request.Headers.Add("Accept", "application/json");
			request.Headers.Add("User-Agent", "TestApp");
			request.Content = JsonContent.Create(new AuthTokenRequest { GrantType = "authorization_code", Code = code, Secret = "4nz555biRA1ra1+8x2rzuqvjME69NG2kDnxMux8LJL8=" });

			var client = ClientFactory.CreateClient();

			var response = await client.SendAsync(request);

			if (response.IsSuccessStatusCode) {
				ToastService.Notify(new ToastMessage(ToastType.Success, "Success"));
			} else {
				ToastService.Notify(new ToastMessage(ToastType.Danger, response.ReasonPhrase));
			}
		}
	}
}
