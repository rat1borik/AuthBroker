@page "/auth"

@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.IdentityModel.Tokens;
@using System.Security.Cryptography;

@inject IHttpClientFactory ClientFactory
@inject IJSRuntime js;
@inject NavigationManager navManager;
@inject StateProvider sp;
@inject IConfiguration cfg;

<section class="vh-100 gradient-custom">
	@if (AuthCode != null) {
		<p>Logging in</p>
	} else {
		<div class="row g-0 d-flex justify-content-center align-items-center h-100">
			<div class="col-12 col-md-8 col-lg-6 col-xl-5"style=" max-width: 450px">
		<div class="card">
					<div class="card-body p-3 text-center">
					<div class="mb-md-3 mt-md-4 pb-5">
				
						<span class="mb-5 fs-1 text-black fw-bold">Test Client</span>
							<Button @onclick="async() => await SignIn()" Class="btn-outline-primary btn-lg px-5 mt-5">@Loc["Login via AuthBroker"]</Button>
		</div>
		</div>
		</div>
		</div>
		</div>
}
</section>

@code {
	public class AuthTokenRequest {
		public string GrantType { get; set; }

		public string Code { get; set; }

		public string Secret { get; set; }
	}

	public class AuthTokenResponse {
		public string AccessToken { get; set; }
		public int ExpiresIn { get; set; }
		public string TokenType { get; set; }
	}

	public class ValidationInfo {
		public string PublicKey { get; set; }
		public string Algorithm { get; set; }
	}

	[Inject] protected ToastService ToastService { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "auth_code")]
	public string? AuthCode { get; set; }

	[Parameter]
	[SupplyParameterFromQuery(Name = "state")]
	public string? State { get; set; }

	private async Task SignIn() {
		navManager.NavigateTo(string.Format("https://localhost:7276/auth?app_id={0}&response_type=code&redirect_uri={1}auth?state={2}", cfg.GetSection("SSO")["ClientId"], navManager.BaseUri, sp.GetState().Base64UrlEncode()), true);
	}

	protected override async Task OnInitializedAsync() {
		if (AuthCode != null) {
			if (State == null || !sp.ValidateState(State.Base64UrlDecode())) {
				ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Something went wrong"] + ": " + Loc["session time has expired"]));
				return;
			}
			var request = new HttpRequestMessage(HttpMethod.Post,
					"https://localhost:7276/api/v1/token");
			request.Headers.Add("Accept", "application/json");
			request.Headers.Add("User-Agent", "TestApp");
			request.Content = JsonContent.Create(new AuthTokenRequest { GrantType = "authorization_code", Code = AuthCode, Secret = cfg.GetSection("SSO")["ClientSecret"] });

			var client = ClientFactory.CreateClient();

			var response = await client.SendAsync(request);

			if (response.IsSuccessStatusCode && response.Content != null) {
				var result = await response.Content.ReadFromJsonAsync<AuthTokenResponse>();
				var jwtHandler = new JwtSecurityTokenHandler();
				SecurityToken securityToken;
				try {
					jwtHandler.ValidateToken(result.AccessToken, await GetValidationParameters(), out securityToken);
					if (securityToken != null)
						ToastService.Notify(new ToastMessage(ToastType.Success, "Success"));
				} catch (SecurityTokenException) {
					ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Incorrect authentification data"]));
				} catch (ArgumentNullException) {
					ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Incorrect authentification data"]));
				}
			} else {
				ToastService.Notify(new ToastMessage(ToastType.Danger, response.ReasonPhrase));
			}
		}
	}

	private async Task<TokenValidationParameters> GetValidationParameters() {
		var request = new HttpRequestMessage(HttpMethod.Get,
					"https://localhost:7276/api/v1/token/validate");
		request.Headers.Add("Accept", "application/json");
		request.Headers.Add("User-Agent", "TestApp");
		var client = ClientFactory.CreateClient();
		var response = await client.SendAsync(request);
		if (response.IsSuccessStatusCode && response.Content != null) {
			var result = await response.Content.ReadFromJsonAsync<ValidationInfo>();

			RSA key = RSA.Create();
			int cnt;
			key.ImportRSAPublicKey(Convert.FromBase64String(result.PublicKey), out cnt);
			if (cnt > 0) {
				return new TokenValidationParameters() {
						ValidateLifetime = true,
						ValidateAudience = true,
						ValidateIssuer = true,
						ValidIssuer = "https://localhost:7276",
						ValidAudience = cfg.GetSection("SSO")["ClientId"],
						IssuerSigningKey = new RsaSecurityKey(key)
				};
			}
			
		}
		return null;
	}
}
