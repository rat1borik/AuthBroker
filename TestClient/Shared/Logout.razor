@page "/logout"

@using TestClient.Authentication

@inject NavigationManager navManager;
@inject IHttpClientFactory ClientFactory
@inject IConfiguration cfg

<span>@Loc["Logging out"]</span>

@code {
	[Inject] protected ToastService ToastService { get; set; }

	protected override async Task OnInitializedAsync() {
		var customAuthStateProvider = (CustomAuthenticationStateProvider)asp;
		if (!(await customAuthStateProvider.GetAuthenticationStateAsync()).IsAnonymous())
		{
			var request = new HttpRequestMessage(HttpMethod.Post,
					"https://localhost:7276/api/v1/token/invalidate");
			request.Headers.Add("Accept", "application/json");
			request.Headers.Add("User-Agent", "TestApp");
			request.Content = JsonContent.Create(new AuthTokenAction
				{
					Token = (await customAuthStateProvider.GetAuthenticationStateAsync()).User.Claims.Where(cl => cl.Type == "access_token").FirstOrDefault().Value,
					Secret = cfg.GetSection("SSO")["ClientSecret"]
				});

			var client = ClientFactory.CreateClient();

			var response = await client.SendAsync(request);
			if (!response.IsSuccessStatusCode)
			{
				ToastService.Notify(new ToastMessage(ToastType.Danger, Loc["Some error occured"]));
			}

			await customAuthStateProvider.UpdateAuthenticationState();
			navManager.NavigateTo("/auth", true);
		}
	}
}
